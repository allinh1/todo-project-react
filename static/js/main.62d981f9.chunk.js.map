{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","placeholder","name","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62d981f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nconst TodoForm = (props) => {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n    // focus on whatever is in ref.\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // props to add components\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 1000),\r\n      text: input,\r\n    });\r\n    // clear field\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Update\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n\r\n          <button onClick={handleSubmit} className=\"todo-button edit\">\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder=\"Type Here\"\r\n            value={input}\r\n            onChange={handleChange}\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className=\"todo-button\">\r\n            Add\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\nimport {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\n// import TodoList from './TodoList';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\nexport default Todo\r\n","import React from 'react'\r\nimport { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = () => {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n          return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n        console.log(...todos);\r\n      };\r\n\r\n      const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n          return;\r\n        }\r\n    \r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n      };\r\n    \r\n      const removeTodo = id => {\r\n        const removedArr = [...todos].filter(todo => todo.id !== id);\r\n    \r\n        setTodos(removedArr);\r\n      };\r\n    \r\n      const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n          if (todo.id === id) {\r\n            todo.isComplete = !todo.isComplete;\r\n          }\r\n          return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n      };\r\n\r\n      return (\r\n        <>\r\n          <h1>My To-do List</h1>\r\n          <TodoForm onSubmit={addTodo} />\r\n          <Todo\r\n            todos={todos}\r\n            completeTodo={completeTodo}\r\n            removeTodo={removeTodo}\r\n            updateTodo={updateTodo}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n\r\nexport default TodoList\r\n","import './App.css';\n// import TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}